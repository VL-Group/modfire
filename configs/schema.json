{"$schema": "http://json-schema.org/draft-07/schema#", "definitions": {"GeneralSchema": {"type": "object", "required": ["key", "params"], "properties": {"key": {"title": "key", "type": "string", "description": "A unique key used to retrieve in registry. For example, given `Lamb` for optimizers, it will check `OptimRegistry` and find the optimizer `apex.optim.FusedLAMB`."}, "params": {"title": "params", "type": "object", "description": "Corresponding funcation call parameters. So the whole call is `registry.get(key)(**params)`.", "additionalProperties": {}}}, "additionalProperties": false}, "TrainSchema": {"type": "object", "required": ["ckptPath", "criterion", "database", "epoch", "gpu", "numReturns", "optim", "querySet", "saveDir", "schdr", "trainSet", "valFreq"], "properties": {"ckptPath": {"title": "ckptPath", "type": "string", "description": "Path to restore model ckpt for warm training."}, "criterion": {"type": "object", "$ref": "#/definitions/GeneralSchema", "description": "Loss function used for training."}, "database": {"type": "object", "$ref": "#/definitions/GeneralSchema", "description": "A spec to load images per line for evalution database."}, "epoch": {"title": "epoch", "type": "integer", "description": "Total training epochs.", "exclusiveMinimum": 0}, "externalLib": {"title": "externalLib", "type": ["array", "null"], "description": "External libraries used for training. All python files in `externalLib` will be imported as modules. In this way, you could extend registries.", "items": {"title": "externalLib", "type": "string"}}, "gpu": {"type": "object", "$ref": "#/definitions/GPUSchema", "description": "GPU configs for training."}, "hooks": {"title": "hooks", "type": "array", "description": "Hooks used for training. Key is used to retrieve hook from `LBHash.train.hooks`.", "items": {"type": "object", "$ref": "#/definitions/GeneralSchema"}}, "numReturns": {"title": "numReturns", "type": "integer", "description": "Rank list return number of samples.", "exclusiveMinimum": 0}, "optim": {"type": "object", "$ref": "#/definitions/GeneralSchema", "description": "Optimizer used for training. As for current we have `Adam` and `Lamb`."}, "querySet": {"type": "object", "$ref": "#/definitions/GeneralSchema", "description": "A spec to load images per line for evalution query."}, "saveDir": {"title": "saveDir", "type": "string", "description": "A dir path to save model checkpoints, TensorBoard messages and logs."}, "schdr": {"type": "object", "$ref": "#/definitions/GeneralSchema", "description": "Learning rate scheduler used for training. As for current we have `ReduceLROnPlateau`, `Exponential`, `MultiStep`, `OneCycle` and all schedulers defined in `modfire.train.lrSchedulers`."}, "trainSet": {"type": "object", "$ref": "#/definitions/GeneralSchema", "description": "A spec to load images per line for training."}, "valFreq": {"title": "valFreq", "type": "integer", "description": "Run validation after every `valFreq` epochs.", "exclusiveMinimum": 0}}, "additionalProperties": false}, "GPUSchema": {"type": "object", "required": ["gpus", "vRam", "wantsMore"], "properties": {"gpus": {"title": "gpus", "type": "integer", "description": "Number of gpus for training. This affects the `world size` of PyTorch DDP.", "exclusiveMinimum": 0}, "vRam": {"title": "vRam", "type": "integer", "description": "Minimum VRam required for each gpu. Set it to `-1` to use all gpus."}, "wantsMore": {"title": "wantsMore", "type": "boolean", "description": "Set to `true` to use all visible gpus and all VRams and ignore `gpus` and `vRam`."}}, "additionalProperties": false}, "ConfigSchema": {"type": "object", "required": ["model", "train"], "properties": {"model": {"type": "object", "$ref": "#/definitions/GeneralSchema", "description": "Model to use. Avaliable params are e.g. `backbone`, `bits` and `hashMethod`."}, "train": {"type": "object", "$ref": "#/definitions/TrainSchema", "description": "Training configs."}}, "additionalProperties": false}}, "$ref": "#/definitions/ConfigSchema"}